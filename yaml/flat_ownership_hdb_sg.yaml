openapi: 3.0.1
info:
  title: Flat Ownership HDB (SG)
  description: |+
   This Data microservice retrieves the list of all retail shops in Singapore which allows you to search for a shop by its name, address, building name, postal code, latitude and longitude coordinates type of business. The resultant dataset offers useful information like the shop operating hours and contact number. Updated weekly.
   
   **Note:** As this microservice uses the GET method, developers using this microservice must remember to have their app encode all the input values to be URL friendly (i.e. all spaces and special characters must be replaced). Here’s a reference on [URL encoding](https://www.w3schools.com/tags/ref_urlencode.ASP).
       
  x-additionalinfo : |+
    **Refining queries in the filterdata field using filter types and match types**
    The filterdata fields use elasticsearch’s syntax (specifically filter types and match types) to help further refine search results and provide greater flexibility in structuring more sophisticated queries. 
  
    **Filter Types:**
    A filter type is a logic operator to which the search results must fulfill certain logical conditions to be returned. The supported match types are&#58;
    
    * **must** - All of the stated conditions must match. Equivalent to an AND operator.
    
      > {"must":[{"match_phrase":{"street":"serangoon north avenue 4"}}]}
    
    * **must_not** - All of the stated conditions must not match. Equivalent to a NOT operator.
      > {"must_not":[{"match":{"postalcode":"570251"}}]}
    
    * **should** - At least one of the stated conditions should match. Equivalent to an OR operator. 
      > {"should":[{"match_phrase":{"street":"serangoon north avenue 4"}}]}
    
    * **filter** - All of the stated conditions that must match. However, results are not scored unlike the other filter types which returns results based on how well the conditions are met.
      > {"filter":[{"match":{"street":"serangoon"}}]}
      
    For a more detailed guide on filter types, [refer to this](https://www.elastic.co/guide/en/elasticsearch/reference/6.8/query-dsl-bool-query.html).
    
    Filter types cannot be used alone and must be used in conjunction with a match type to complete the query.
    **Match Types:**
    A match type is a match operator nested within a filter type that fine-tunes the matching condition of the text search. The supported match types are&#58;
    
    * **match** - Search within a full text field for a single word

      > {"match":{"street":"serangoon central, serangoon mrt station"}}

    * **match_phrase** - Search within a full text field

      > {"match_phrase":{"street":"serangoon central, serangoon mrt station"}}

    * **match_phrase_prefix** - Search within a full text field with prefix

      > {"match_phrase_prefix":{"street":"serangoon central, serangoon mrt station"}}

    * **term** - Returns results that contain an exact term in a provided field

      > {"term":{"street":"serangoon central, serangoon mrt station"}}

    * **terms** - Returns results that contain one or more exact terms in a provided field

      > {"terms":{"street":["bishan","and mo kio"]}}

    For a more detailed guide to match types, [refer to this](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/term-level-queries.html).
    
    **Forming sophisticated queries using combinations of filter types (in JSON)**
    Multiple filter types can be combined together in one query (written in JSON format) to form a very sophisticated query. Here’s one example below&#58;
    
     > {
     >  "must":[{"match_phrase":{"street":"serangoon+central"}}],
     >  "filter":[{"match":{"postalcode":"650633"}}],
     >  "should":[{"match":{"source":"hdb"}}],
     >  "must_not":[{"match":{"postalcode":"650633"}}
     > }

    **Sample Queries Based on Use Cases**
    1. **Search for all carparks around 414 Bedok North Road**
       Using a querystring only&#58;
      
       > querystring = “414 bedok north road"
    2. **Search for all carparks within a 1KM radius from Tampines Mall**
       Using a filterdata only&#58;
       > filterdata = {"filter":[{"geo_distance": {"distance": "1km","location": "1.3525,103.9447"}}]}
      
    3. **Search for all carparks around Tampines with motorcycle parking**
       Using both querystring + filterdata&#58;
       
       > querystring = tampines
       > filterdata = {"filter":[ {"range":{"mc":{"gte":1}}} ]}
      
    4. **Search for all lorry parking lots for Bishan Street 22**
    
       Using both querystring + filterdata&#58;
      
       > querystring = “bishan street 22”
       > filterdata = {"filter":[ {"range":{"lorry":{"gte":1}}} ]}

  version: '0.1'
servers:
  - url: 'https://api.sentient.io'
tags:
- name: "v0.1"
  description: "Published Date - Apr 24, 2020"
paths:
   /DaaS/prod/hdb/ownership:
    get:
      tags:
        - v0.1
      parameters:
        - in: query
          name: querystring
          schema:
            type: string
          description: |+ 
            Simple keyword search for matches in all searchable fields. Keywords separated by spaces will return results containing any of those keywords. For exact phrase match, put entire phrase in double quotes (" ").
            
            If this field is set to null, by default the microservice will return all carparks (within the stated limit), which can be further refined through the filterdata field for more sophisticated queries.
            
          example: "serangoon"
          default: false
        - in: query
          name: offset
          schema:
            type: integer
          description: The offset of the record list ie the starting index
          example: "0"
          default: false
        - in: query
          name: limit
          schema:
            type: integer
          description: The max records to return for the request. Default - 10, Max - 10000
          example: "10"
          default: false
        - in: query
          name: filterdata
          schema:
            type: string
          description: |+
            Refine the search further on any of the possible through the 4 filter types &#58;
            * must
            * must_not
            * should
            * filter
          default: false
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
              example:
                results:
                  total: 986
                  max_score: 17.995623
                  hits:
                  - _index: sentient_durationofownership_hdb_index
                    _type: dir_doc
                    _id: 050533/40<T<=50
                    _score: 1
                    _source:
                      postalcode: '560720'
                      len_of_ownership: 40 < t <= 50
                      len_of_ownership_id: '5'
                      no_of_units: '29'
                      block: '533'
                      street: upper cross street
                      xcoord: 29520.58
                      ycoord: 39311.68
                      address: 533 upper cross street
                      createddate: '2020-04-23'
                      lastupdated: '2020-04-23'
                      location:
                        lat: 1.37179535
                        lon: 103.8469821
                      source: hdb
                message: Successfully Processed
                status: Success
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '402':
          description: Payment Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentrequired'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notfound'
        '419':
          description: Input Field Missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inputfieldmissing'
        '420':
          description: Input Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inputlimitexceeded'        
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servererror'
        '504':
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gatewaytimeout'
      security:
        - APIAuthorizer: []
components:
  schemas:
    success:
      type: object
      properties:
        results:
          type: object
          example: {<Json Object>}
          description: Json Object of returned results 
          properties:
            total:
              type: number
              example: 986
              description: Total number of records
            max_score:
              type: number
              example: 17.995623
              description: The highest score value
            hits:
              type: array
              example: [{<JSON result Object}]
              description: The list of Json result object
              items:
                type: object
                properties:
                  _index:
                    type: string
                    description: Index group of the document
                    example: "sentient_durationofownership_hdb_index"
                  _type: 
                    type: string
                    description: Content type of the document
                    example: "dir_doc"
                  _id: 
                    type: number
                    description: Document ID
                    example: "050533/40<T<=50"
                  _score: 
                    type: string
                    description: The document score for the search request
                    example: 1
                  _source: 
                    properties:
                      postalcode: 
                        type: string
                        description: Postal code of a block
                        example: "560720"
                      len_of_ownership: 
                        type: string
                        description: Range of length
                        example: "40 < t <= 50"
                      len_of_ownership_id: 
                        type: string
                        description: Length Types
                        example: "5"
                      no_of_units:
                        type: number
                        description: Ownership units
                        example: "29"
                      block:
                        type: string
                        description: Address block
                        example: "533"
                      street:
                        type: string
                        description: Street Address or building name
                        example: "upper cross street"
                      xcoord:
                        type: string
                        description: SVY21 X coordinates
                        example: 29520.58
                      ycoord:
                        type: string
                        description: SVY21 Y coordinates
                        example: 39311.68
                      address:
                        type: string
                        description: Building full address
                        example: "533 upper cross street"
                      createddate:
                        type: string
                        description: Record first release date on sentient
                        example: "2020-04-23"
                      lastupdated:
                        type: string
                        description: Record last updated date on sentient
                        example: "2020-04-23"
                      location:
                        properties:
                            lat: 
                              type: string
                              description: WGS84 latitude
                              example: 1.37179535
                            lon:
                              type: string
                              description: WGS84 longitude
                              example: 103.8469821
                      source: 
                        type: string
                        description: Dataset name
                        example: "hdb"
        message:
          type: string
          example: Successfully Processed
          description: The detail description on the status
        status:
          type: string
          example: Success
          description: The status of the API call Success/Failure
    versions:
      type: object
      properties: 
        v1.0:
         type: array
         items:
          oneOf:
            - type: string
              example: Published Date - Apr 24, 2020
              description: "Version 1.0 description"
        v2.0:
         type: array
         items:
          description: "name of miscellaneous names found in the text string"
          oneOf:
            - type: string
              example: Published Date - Apr 02, 2020
              description: "Version 2.0 description"
        v3.0:
         type: array
         items:
          description: "name of PERSON found in the text string"
          oneOf:
            - type: string
              example: Published Date - March 24, 2020
              description: "Version 3.0 description"
    unauthorized:
      type: object
      properties:
        message:
          type: string
          example: Missing Authentication Token
        status:
          type: string
          example: Failure
    forbidden:
      type: object
      properties:
        message:
          type: string
          example: Access Denied Unauthorized User
        status:
          type: string
          example: Failure
    paymentrequired:
      type: object
      properties:
        message:
          type: string
          example: Insufficient Credits Kindly Top Up
        status:
          type: string
          example: Failure
    notfound:
      type: object
      properties:
        message:
          type: string
          example: Invalid Request URL
        status:
          type: string
          example: Failure
    servererror:
      type: object
      properties:
        message:
          type: string
          example: Internal Server Error
        status:
          type: string
          example: Failure
    gatewaytimeout:
      type: object
      properties:
        message:
          type: string
          example: Request Timeout
        status:
          type: string
          example: Failure
    inputfieldmissing:
      type: object
      properties:
        message:
          type: string
          example: Input Field Missing
        status:
          type: string
          example: Failure
    inputlimitexceeded:
      type: object
      properties:
        message:
          type: string
          example: Input Limit Exceeded
        status:
          type: string
          example: Failure 
    versions:
      type: object
      properties: 
        v0.1:
         type: array
         items:
          oneOf:
            - type: string
              example: Published Date - Apr 24,2020
              description: Initial version release             
  securitySchemes:
    APIAuthorizer:
      type: apiKey
      name: x-api-key
      in: header
      x-amazon-apigateway-authtype: custom
      description: Authentication is done using the x-api-key in the request header.
  
