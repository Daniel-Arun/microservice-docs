openapi: 3.0.1
info:
  title: Building Addresses HDB (SG)
  description: |+
   This Data microservice retrieves the list of all retail shops in Singapore which allows you to search for a shop by its name, address, building name, postal code, latitude and longitude coordinates type of business. The resultant dataset offers useful information like the shop operating hours and contact number. Updated weekly.
   
   **Note:** As this microservice uses the GET method, developers using this microservice must remember to have their app encode all the input values to be URL friendly (i.e. all spaces and special characters must be replaced). Here’s a reference on [URL encoding](https://www.w3schools.com/tags/ref_urlencode.ASP).
  x-additionalinfo : |+
      **Refining queries in the filterdata field using filter types and match types**
      
      The filterdata fields use elasticsearch’s syntax (specifically filter types and match types) to help further refine search results and provide greater flexibility in structuring more sophisticated queries. 
      **Filter Types:**
      
      A filter type is a logic operator to which the search results must fulfill certain logical conditions to be returned. The supported match types are&#58;
      
      * **must** - All of the stated conditions must match. Equivalent to an AND operator.
      
        > "must":[{"match_phrase":{"street": "ang mo kio avenue 4"}}]
        
      * **must_not** - All of the stated conditions must not match. Equivalent to a NOT operator.
      
      
        > {"must_not":[{"match":{"block":"108"}}]}
        
      * **should** - At least one of the stated conditions should match. Equivalent to an OR operator. 
      
        > {"should":[{"match":{postalcode": "650633}}]}
        
      * **filter** - All of the stated conditions that must match. However, results are not scored unlike the other filter types which returns results based on how well the conditions are met.
        
        > "filter":[{"match":{"source":"hdb"}}]
        
      For a more detailed guide on filter types, [refer to this](https://www.elastic.co/guide/en/elasticsearch/reference/6.8/query-dsl-bool-query.html).
      
      Filter types cannot be used alone and must be used in conjunction with a match type to complete the query.
      
      **Match Types:**
      
      A match type is a match operator nested within a filter type that fine-tunes the matching condition of the text search. The supported match types are&#58;
      
      * **match** - Search within a full text field for a single word
      
        > { "match":{"street":"bishan"}}
        
      * **match_phrase** - Search within a full text field
      
        > { "match_phrase":{ "street":bishan street 24"}}
        
      * **match_phrase_prefix** - Search within a full text field with prefix
      
        > {"match_phrase_prefix":{"street":"bishan"}}
        
      * **term** - Returns results that contain an exact term in a provided field
      
        > {"term":{"street":"bishan"}}
        
      * **terms** - Returns results that contain one or more exact terms in a provided field
      
        > {"terms":{"street":["bishan","and mo kio"]}}
        
      For a more detailed guide to match types, [refer to this](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/term-level-queries.html).
      
      **Forming sophisticated queries using combinations of filter types (in JSON)**
      
      Multiple filter types can be combined together in one query (written in JSON format) to form a very sophisticated query. Here’s one example below&#58;
      
        > {
        > "must":[{"match_phrase":{"street": "ang mo kio avenue 4"}}],
        > "filter":[{"match":{"source":"hdb"}}] ,
        > "should":[{"match":{postalcode": "650633}}],
        > "must_not":[{"match":{"block":"108"}}
        > }
        
  version: '0.1'
servers:
  - url: https://api.sentient.io
tags:
- name: "v0.1"
  description: "Published Date - Oct 10, 2019"
paths:
   /DaaS/prod/directories/searchbranch:
    get:
      tags:
        - v0.1
      parameters:
        - in: query
          name: querystring
          schema:
            type: string
          description: |+ 
            Simple keyword search for matches in all searchable fields. Keywords separated by spaces will return results containing any of those keywords. For exact phrase match, put entire phrase in double quotes (" ").
            
            If this field is set to null, by default the microservice will return all carparks (within the stated limit), which can be further refined through the filterdata field for more sophisticated queries.
            
          example: "ang mo kio"
          default: false
        - in: query
          name: offset
          schema:
            type: integer
          description: The offset of the record list ie the starting index
          example: "0"
          default: false
        - in: query
          name: limit
          schema:
            type: integer
          description: The max records to return for the request. Default - 10, Max - 10000
          example: "10"
          default: false
        - in: query
          name: filterdata
          schema:
            type: string
          description: |+
            Refine the search further on any of the possible through the 4 filter types &#58;
            * must
            * must_not
            * should
            * filter
          default: false
          example: |+
              {"must":[{"match_phrase":{"street":"ang mo kio avenue 6"}}],"filter":[{"match":{"trade":"shop"}}] ,"should":[{"match":{"postalcode": "560720"}}]}
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '402':
          description: Payment Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentrequired'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notfound'
        '419':
          description: Input Field Missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inputfieldmissing'
        '420':
          description: Input Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inputlimitexceeded'        
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servererror'
        '504':
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gatewaytimeout'
      security:
        - APIAuthorizer: []
components:
  schemas:
    success:
      type: object
      properties:
        results:
          total: 102
          max_score: 6.998906
          hits:
          - _index: sentient_directory_building_index
            _type: dir_doc
            _id: r7xcqWgBv3dNEHq2mz7x
            _score: 6.998906
            _source:
              buildingname: ''
              postalcode: '569866'
              block: '2761'
              street: ang mo kio avenue 5, spc ang mo kio avenue 5
              location:
                lat: 1.37905
                lon: 103.83596999999999
              source: starhub
              createddate: '2019-02-01'
        message:
          type: string
          example: Successfully Processed
          description: The detail description on the status
        status:
          type: string
          example: Success
          description: The status of the API call Success/Failure
    unauthorized:
      type: object
      properties:
        message:
          type: string
          example: Missing Authentication Token
        status:
          type: string
          example: Failure
    forbidden:
      type: object
      properties:
        message:
          type: string
          example: Access Denied Unauthorized User
        status:
          type: string
          example: Failure
    paymentrequired:
      type: object
      properties:
        message:
          type: string
          example: Insufficient Credits Kindly Top Up
        status:
          type: string
          example: Failure
    notfound:
      type: object
      properties:
        message:
          type: string
          example: Invalid Request URL
        status:
          type: string
          example: Failure
    servererror:
      type: object
      properties:
        message:
          type: string
          example: Internal Server Error
        status:
          type: string
          example: Failure
    gatewaytimeout:
      type: object
      properties:
        message:
          type: string
          example: Request Timeout
        status:
          type: string
          example: Failure
    inputfieldmissing:
      type: object
      properties:
        message:
          type: string
          example: Input Field Missing
        status:
          type: string
          example: Failure
    inputlimitexceeded:
      type: object
      properties:
        message:
          type: string
          example: Input Limit Exceeded
        status:
          type: string
          example: Failure      
    versions:
      type: object
      properties: 
        v0.1:
         type: array
         items:
          oneOf:
            - type: string
              example: Published Date - Oct 31,2018
              description: Initial version release             
  securitySchemes:
    APIAuthorizer:
      type: apiKey
      name: x-api-key
      in: header
      x-amazon-apigateway-authtype: custom
      description: Authentication is done using the x-api-key in the request header.
