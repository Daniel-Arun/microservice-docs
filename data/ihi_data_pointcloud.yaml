openapi: 3.0.1
info:
  title: IHI Pointcloud Data
  x-subscribelink: ihi_data
  description: |+
   This microservice returns information on Ishikawajima-Harima Heavy Industries(IHI) Pointcloud Data which includes the 3DLR Location of Boon Lay Way-Yuan Ching Road, Singapore. The Data comprises all the vehicle detection and does not contain any pedestrian data. The IHI LiDAR programme makes selected public and non-public datasets available to developers and companies to improve their service offerings to benefit the lives of Singapore citizens. Sentient.io is proud to partner with IHI to manage and facilitate the sharing of data for the LiDAR Programme.
   
   **Note:** As this microservice uses the GET method, developers using this microservice must remember to have their app encode all the input values to be URL friendly (i.e. all spaces and special characters must be replaced). Here’s a reference on [URL encoding](https://www.w3schools.com/tags/ref_urlencode.ASP).
       
  x-additionalinfo : |+
    Suggested Use Cases:
    - This microservice can be used as a solution to help businesses better understand and connect with their customers, engage new prospects and increase revenue. For example, it can be used to create intelligent prospect lists that ensure one is always maximizing their marketing investment.
    
    **Refining queries in the filterdata field using filter types and match types**
    The filterdata fields use elasticsearch’s syntax (specifically filter types and match types) to help further refine search results and provide greater flexibility in structuring more sophisticated queries. 
  
    **Filter Types:**
    A filter type is a logic operator to which the search results must fulfill certain logical conditions to be returned. The supported match types are&#58;
    
    * **must** - All of the stated conditions must match. Equivalent to an AND operator.
    
      > {"must":[{"match_phrase":{"identify":10}}]}
    
    * **must_not** - All of the stated conditions must not match. Equivalent to a NOT operator.
      > {"must_not":[{"match":{"identify":10}}]}
    
    * **should** - At least one of the stated conditions should match. Equivalent to an OR operator. 
      > {"should":[{"match_phrase":{"seqno":39736}}]}
    
    * **filter** - All of the stated conditions that must match. However, results are not scored unlike the other filter types which returns results based on how well the conditions are met.
      > {"filter":[{"match":{"targetid":9405}}]}
      
    For a more detailed guide on filter types, [refer to this](https://www.elastic.co/guide/en/elasticsearch/reference/6.8/query-dsl-bool-query.html).
    
    Filter types cannot be used alone and must be used in conjunction with a match type to complete the query.
    **Match Types:**
    A match type is a match operator nested within a filter type that fine-tunes the matching condition of the text search. The supported match types are&#58;
    
    * **match** - Search within a full text field for a single word
      > {"filter":[{"match":{"dataclass": "SD"}}]}
    * **match_phrase** - Search within a full text field
      > {"filter":[{"match_phrase":{"targetidx": "0x1451"}}]}
    * **match_phrase_prefix** - Search within a full text field with prefix
      > {"filter":[{"match_phrase_prefix":{"originid":"0x145D"}}]}
    * **term** - Returns results that contain an exact term in a provided field
      > {"filter":[{"term":{"situation":"0x02"}}]}
    * **terms** - Returns results that contain one or more exact terms in a provided field
      > {"filter":[{"terms":{"identify":[10,11,12]}}]}
      
    * **range** - Returns results that contain terms within a stipulated range
    
      > {"filter":[{"range":{"detecttime":{"gte":"2020-7-7T18:28:45.365Z"}}}]}
      > {"filter":[{"range":{"detecttime":{"lte":"2020-7-7T19:19:39.985Z"}}}]}
      > {"filter":[{"range":{"detecttime":{"gte":"2020-7-7T18:28:45.365Z","lte":"2020-7-7T19:19:39.985Z"}}}]}
      
    * **exists** - Returns results that contain any indexed value for a field
    
      > {"filter":[{"exists":{ "field":"identify"}}]}
    For a more detailed guide to match types, [refer to this](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/term-level-queries.html).
    
    **Forming sophisticated queries using combinations of filter types (in JSON)**
    Multiple filter types can be combined together in one query (written in JSON format) to form a very sophisticated query. Here’s one example below&#58;
    
     > {
     > "must":[{"match_phrase":{"street":"serangoon+central"}}],
     > "filter":[{"range":{"residents":{"gte":10}}}],
     > "should":[{"match":{"gender":"male"}}],
     > "must_not":[{"match":{"age_group_id":"2"}}]
     > }
    **Sample Queries Based on Use Cases**
    
    1. **Search for the number of elderly residents staying at Blk 423, Tampines Street 41 filter by age and gender.**
      Using a filterdata only&#58;
      
      > {"filter":[{"match":{"street":"tampines street 41"}},{"match":{"block":"423"}},{"terms":{"age_group_id":[6,7,8]}}]}
      
    2. **Search for the different types of vehicles like Motorcycle, Normal car, Large car of dataclass "SD" in detected time of "2020-7-7T19:19:39.985Z".**
      Using a filterdata only&#58;
      
      > {"filter":[{"terms":{"identify":[10,11,12]}},{"match":{"dataclass":"SD"}},{"terms":{"detecttime":"2020-7-7T19:19:39.985Z"}}]}
  version: '0.1.0'
servers:
  - url: 'https://api.sentient.io'
tags:
- name: "v0.1.0"
  description: "Published Date - Feb 26, 2021"
paths:
  /DaaS/dev/ihidata:
    get:
      tags:
        - v0.1.0
      parameters:
        - in: query
          name: querystring
          schema:
            type: string
          description: |+ 
            Simple keyword search for matches in all searchable fields. Keywords separated by spaces will return results containing any of those keywords. For exact phrase match, put entire phrase in double quotes (" ").
            
            If this field is set to null, by default the microservice will return all buildings (within the stated limit), which can be further refined through the filterdata field for more sophisticated queries.
            
          example: "SD"
          default: false
        - in: query
          name: offset
          schema:
            type: integer
          description: The offset of the record list ie the starting index
          example: "0"
          default: false
        - in: query
          name: limit
          schema:
            type: integer
          description: The max records to return for the request. Default - 10, Max - 10000
          example: "10"
          default: false
        - in: query
          name: filterdata
          schema:
            type: string
          description: |+
            Refine the search further on any of the possible through the 4 filter types &#58;
            * must
            * must_not
            * should
            * filter
          default: false
          example: |+
            {"filter":[{"match":{"_id": "57464093"}},{"match":{"dataclass": "SD"}},{"match":{"detecttime": "2020-7-7T18:28:45.365Z"}}]}
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
              example:
                results:
                  total: 607176
                  max_score: 1.0
                  hits:
                  - _index: index_ihi_pointcloud
                    _type: dir_doc
                    _id: 57364055
                    _score: 1.0
                    _source:
                      1x: 79
                      1y: 3927
                      2x: 79
                      2y: 4515
                      createddate: '2021-02-18T16:19:09.689Z'
                      lastupdated: '2021-02-18T16:19:09.689Z'
                      dataclass: "SD"
                      datalen: 612
                      datanumlow: 15
                      datanumup: 0
                      detecttime: '2020-7-7T18:28:45.365Z'
                      height: 261
                      identify: 11
                      jamlane: 0
                      length: 588
                      originid: "0x145D"
                      sendtime: '2020-7-7T18:38:35.653Z'
                      seqno: 573
                      situation: "0x02"
                      targetid: 64055
                      targetidx: "0x1451"
                      width: 250
                      xspeed: -8
                      yspeed: -60
                message: Successfully Processed
                status: Success                              
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '402':
          description: Payment Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentrequired'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notfound'
        '419':
          description: Input Field Missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inputfieldmissing'
        '413':
          description: Input Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inputlimitexceeded'  
        '415':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidinput'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servererror'
        '504':
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gatewaytimeout'
      security:
        - APIAuthorizer: []
components:
  schemas:
    success:
      type: object
      properties:
        results:
          type: object
          example: {<Json Object>}
          description: Json Object of returned results 
          properties:
            total:
              type: number
              example: 607176
              description: Total number of records
            max_score:
              type: number
              example: 1.0
              description: The highest score value
            hits:
              type: array
              example: [{<JSON result Object}]
              description: The list of Json result object
              items:
                type: object
                properties:
                  _index:
                    type: string
                    description: Index group of the document
                    example: "index_ihi_pointcloud"
                  _type: 
                    type: string
                    description: Content type of the document
                    example: "dir_doc"
                  _id: 
                    type: string
                    description: Document ID
                    example: "57364055"
                  _score: 
                    type: number
                    description: The document score for the search request
                    example: 1.0
                  _source: 
                    type: object
                    example: {<Json Object>}
                    description: Json Object of returned hits                    
                    properties:
                            1x: 
                              type: number
                              description: X direction central top position of target
                              example: 79
                            1y: 
                              type: number
                              description: Y direction central top position of target
                              example: 3927
                            2x: 
                              type: number
                              description: X direction central tail position of target
                              example: 79
                            2y:
                              type: number
                              description: Y direction central tail position of target
                              example: 4515
                            dataclass:
                              type: string
                              description: Type of Data
                              example: "SD"
                            datalen:
                              type: number
                              description: Lenght of the information
                              example: 612
                            datanumlow:
                              type: number
                              description: Lower data number
                              example: 15
                            datanumup:
                              type: number
                              description: Upper data number
                              example: 0
                            detecttime:
                              type: string
                              description: Target detected time
                              example: "2020-7-7T18:28:45.365Z"
                            height:
                              type: number
                              description: Height of target
                              example: 261
                            identify:
                              type: number
                              description: Target vehicle type
                              example: 11
                            jamlane:
                              type: number
                              description: Jam lane number
                              example: 0
                            length:
                              type: number
                              description: Length of target
                              example: 588
                            originid:
                              type: string
                              description: Origin Id
                              example: "0x145D"
                            sendtime:
                              type: string
                              description: Target send time
                              example: "2020-7-7T18:38:35.653Z"
                            createddate:
                              type: string
                              description: Record first release date on sentient
                              example: "2021-02-18T16:19:09.689Z"
                            lastupdated:
                              type: string
                              description: Record last updated date on sentient
                              example: "2021-02-18T16:19:09.689Z"
                            seqno:
                              type: number
                              description: Sequence number of target
                              example: 573 
                            situation:
                              type: string
                              description: Situation of target
                              example: "0x02"
                            targetid:
                              type: number
                              description: Target Id
                              example: 64055
                            targetidx:
                              type: string
                              description: Target Idx
                              example: "0x1451"
                            width:
                              type: number
                              description: Width of target
                              example: 250
                            xspeed:
                              type: number
                              description: xspeed of target
                              example: -8
                            yspeed:
                              type: number
                              description: yspeed of target
                              example: -60
        message:
          type: string
          example: Successfully Processed
          description: The detail description on the status
        status:
          type: string
          example: Success
          description: The status of the API call Success/Failure
    unauthorized:
      type: object
      properties:
        message:
          type: string
          example: Missing Authentication Token
        status:
          type: string
          example: Failure
    forbidden:
      type: object
      properties:
        message:
          type: string
          example: Access Denied Unauthorized User
        status:
          type: string
          example: Failure
    paymentrequired:
      type: object
      properties:
        message:
          type: string
          example: Insufficient Credits Kindly Top Up
        status:
          type: string
          example: Failure
    notfound:
      type: object
      properties:
        message:
          type: string
          example: Invalid Request URL
        status:
          type: string
          example: Failure
    servererror:
      type: object
      properties:
        message:
          type: string
          example: Internal Server Error
        status:
          type: string
          example: Failure
    gatewaytimeout:
      type: object
      properties:
        message:
          type: string
          example: Request Timeout
        status:
          type: string
          example: Failure
    inputfieldmissing:
      type: object
      properties:
        message:
          type: string
          example: Input Field Missing
        status:
          type: string
          example: Failure
    inputlimitexceeded:
      type: object
      properties:
        message:
          type: string
          example: Input Limit Exceeded
        status:
          type: string
          example: Failure 
    invalidinput:
      type: object
      properties:
        message:
          type: string
          example: Invalid Input
        status:
          type: string
          example: Failure
    versions:
      type: object
      properties: 
        v0.1.0:
         type: array
         items:
          oneOf:
            - type: string
              example: Published Date - Feb 26,2021
              description: Initial version release               
  securitySchemes:
    APIAuthorizer:
      type: apiKey
      name: x-api-key
      in: header
      x-amazon-apigateway-authtype: custom
      description: Authentication is done using the x-api-key in the request header.
